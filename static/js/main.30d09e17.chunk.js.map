{"version":3,"sources":["Components/Header/Header.jsx","graphql/mutations.js","Components/LinkIpnut/LinkInput.jsx","Components/ListOfSongs/Song.jsx","graphql/subscriptions.js","Components/ListOfSongs/ListOfSongs.jsx","Components/QueList/QueuedSong.jsx","Components/QueList/QueList.jsx","graphql/queries.js","Components/MusicPlayer/MusicPlayer.jsx","reducer.js","App.js","Components/Theme/Theme.js","graphql/client.js","index.js"],"names":["useStyles","makeStyles","theme","title","paddingLeft","spacing","Header","s","AppBar","position","color","Toolbar","Typography","variant","component","className","ADD_OR_REMOVE_FROM_QUEUE","gql","ADD_SONG","container","display","alignItems","urlInput","margin","addSongButton","dialog","textAline","thumbnail","width","INTIAL_SONG_VALUE","duration","artist","url","LinkInput","useState","modal","setModal","setUrl","playable","setPlayable","song","setSong","useMutation","addSong","error","setClose","submitSong","a","variables","length","console","log","player","nestedPlayer","getVideoData","songData","getYoutubeInfo","getCurrentSound","getSoundCloudInfo","changeInputs","e","target","name","value","prevState","getDuration","video_id","author","Promise","resolve","Number","user","username","artwork_url","replace","handleError","field","graphQLErrors","extensions","path","includes","Dialog","open","onClose","DialogTitle","DialogContent","src","alt","TextField","label","onChange","fullWidth","helperText","DialogActions","Button","onClick","placeholder","type","InputProps","startAdornment","InputAdornment","disabled","endIcon","AddBoxOutlined","hidden","onReady","handleEditSong","useStyle","songInfoContainer","songInfo","justifyContent","objectFit","height","Song","songPlaying","setSongPlaying","id","React","useContext","SongContext","state","dispatch","onCompleted","data","localStorage","setItem","JSON","stringify","addOrRemoveFromQueue","useEffect","playing","isPlaying","changeToggle","Card","CardMedia","image","CardContent","gutterBottom","CardActions","IconButton","size","input","__typename","GET_SONGS","ListOfSongs","useSubscription","loading","style","flexDirection","marginTop","CircularProgress","songs","map","key","avatar","text","textOverflow","overflow","gridAutoFlow","gridTemplateColumns","gridGap","whiteSpace","QueuedSong","Avatar","Delete","QueList","queue","Hidden","mdDown","i","GET_QUEUE_SONGS","details","padding","content","flex","controls","paddingRight","playIcon","MusicPlayer","useQuery","played","setPlayed","seeking","setSeeking","playedSeconds","setPlayedSeconds","positionInQueue","setPositionInQueue","reactPlayerRef","useRef","songIndex","findIndex","nextSong","prevSong","Date","toISOString","substr","Slider","onMouseDown","onMouseUp","current","seekTo","event","newValue","min","max","step","ref","onProgress","songReducer","action","createContext","App","initialSongState","useReducer","greaterThanMd","useMediaQuery","breakpoints","up","greaterThanSm","Provider","only","Grid","item","xs","md","paddingTop","right","top","left","bottom","Theme","createMuiTheme","palette","primary","teal","secondary","purple","client","ApolloClient","link","WebSocketLink","uri","options","reconnect","cache","InMemoryCache","typeDefs","resolvers","Mutation","_","queryResult","readQuery","query","newQueue","some","filter","writeQuery","Boolean","getItem","parse","writeData","ReactDOM","render","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.30d09e17.chunk.js","sourcesContent":["import React from 'react';\nimport {AppBar, Toolbar, Typography} from \"@material-ui/core\";\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\nimport {makeStyles} from \"@material-ui/core/styles\";\n\n\n\nconst useStyles = makeStyles(theme=>({\n    title: {\n        paddingLeft: theme.spacing(2)\n    }\n}));\n\n\nfunction Header() {\n    const s = useStyles();\n  return (\n    <AppBar position={'fixed'} color={'primary'}>\n        <Toolbar>\n            <MusicNoteIcon/>\n            <Typography variant={'h6'} component={'h1'} className={s.title}>\n                Apollo Music Share\n            </Typography>\n        </Toolbar>\n    </AppBar>\n  );\n}\n\nexport default Header;\n","import {gql} from 'apollo-boost';\r\n\r\nexport const ADD_OR_REMOVE_FROM_QUEUE = gql`\r\n    mutation addOrRemoveFromQueue($input: SongInput!){\r\n        addOrRemoveFromQueue(input: $input) @client \r\n    }\r\n`\r\n\r\n\r\nexport const ADD_SONG =  gql`\r\n    mutation AddSong(\r\n    $artist: String!, \r\n    $title: String!, \r\n    $duration: Float!,\r\n    $url: String!, \r\n    $thumbnail: String!\r\n) {\r\n  insert_songs(\r\n     objects: {\r\n         artist: $artist, \r\n         duration: $duration, \r\n         title: $title, \r\n         url: $url, \r\n         thumbnail: $thumbnail\r\n     }) {\r\n    affected_rows\r\n  }\r\n}\r\n`","import React, {useState} from 'react';\nimport TextField from \"@material-ui/core/TextField\";\nimport { InputAdornment} from \"@material-ui/core\";\nimport {AddBoxOutlined} from \"@material-ui/icons\";\nimport Button from \"@material-ui/core/Button\";\nimport LinkIcon from '@material-ui/icons/Link';\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport {makeStyles} from \"@material-ui/styles\";\nimport ReactPlayer from \"react-player\";\nimport {useMutation} from \"@apollo/react-hooks\";\nimport {ADD_SONG} from \"../../graphql/mutations\";\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n    urlInput: {\n        margin: theme.spacing(1)\n    },\n    addSongButton: {\n        margin: theme.spacing(1)\n    },\n    dialog: {\n        textAline: 'center'\n    },\n    thumbnail: {\n        width: '90%'\n    }\n}))\n\nconst INTIAL_SONG_VALUE = {\n    duration: 0,\n    title: '',\n    artist: '',\n    thumbnail: '',\n    url: ''\n}\n\nfunction LinkInput() {\n    const [modal, setModal] = useState(false);\n    const [url, setUrl] = useState('');\n    const [playable, setPlayable] = useState(false);\n    const [song, setSong] = useState(INTIAL_SONG_VALUE);\n    const [addSong, {error}] = useMutation(ADD_SONG);\n    const s = useStyles()\n\n    let setClose =  () => {\n        setModal(false)\n    }\n    let submitSong = async () => {\n        try {\n            let {duration, title, artist, thumbnail, url} = song\n            await addSong({\n                variables: {\n                    duration: duration > 0 ? duration : null,\n                    title: title.length > 0 ? title : null,\n                    artist: artist.length > 0 ? artist : null,\n                    thumbnail: thumbnail.length > 0 ? thumbnail : null,\n                    url: url.length > 0 ? url : null\n                }\n            })\n            setSong(INTIAL_SONG_VALUE);\n            setClose();\n        } catch (e) {\n            console.log('error', e)\n        }\n    }\n\n    async function handleEditSong({player}) {\n        setPlayable(true)\n        let nestedPlayer = player.player.player;\n        let songData;\n        if (nestedPlayer.getVideoData) {\n            songData = getYoutubeInfo(nestedPlayer)\n        } else if (nestedPlayer.getCurrentSound) {\n            songData = await getSoundCloudInfo(nestedPlayer)\n        }\n        setSong({...songData, url})\n    }\n\n    let changeInputs = (e) => {\n        const {name, value} = e.target\n        setSong(prevState => ({\n            ...prevState,\n            [name]: value\n        }))\n    }\n\n\n    let getYoutubeInfo = (player) => {\n        const duration = player.getDuration()\n        const {title, video_id, author} = player.getVideoData();\n        const thumbnail = `http://img.youtube.com/vi/${video_id}/0.jpg`;\n        return {duration, title, artist: author, thumbnail}\n    }\n    let getSoundCloudInfo = (player) => {\n        return new Promise(resolve => {\n            player.getCurrentSound(songData => {\n                if (songData) {\n                    resolve({\n                        duration: Number(songData.duration / 1000),\n                        title: songData.title,\n                        artist: songData.user.username,\n                        thumbnail: songData.artwork_url.replace('-large', '-t500x500')\n                    })\n                }\n            })\n        })\n    }\n    const handleError = (field) => {\n        return error?.graphQLErrors[0]?.extensions?.path.includes(field)\n    }\n\n    const {title, artist, thumbnail} = song;\n    return (\n        <div className={s.container}>\n            <Dialog open={modal} onClose={setClose} className={s.dialog}>\n                <DialogTitle>Edit Song</DialogTitle>\n                <DialogContent>\n                    <img src={thumbnail} alt=\"Song thumbnail\" className={s.thumbnail}/>\n                    <TextField value={title} margin={'dense'} name={'title'} label={'Title'} onChange={changeInputs}\n                               fullWidth error={handleError('title')}\n                               helperText={handleError('title') && 'Fill out field'}/>\n                    <TextField value={artist} margin={'dense'} name={'artist'} label={'Artist'} onChange={changeInputs}\n                               fullWidth error={handleError('artist')}\n                               helperText={handleError('artist') && 'Fill out field'}/>\n                    <TextField value={thumbnail} margin={'dense'} name={'thumbnail'} label={'Thumbnail'}\n                               onChange={changeInputs} fullWidth error={handleError('thumbnail')}\n                               helperText={handleError('thumbnail') && 'Fill out field'}/>\n                </DialogContent>\n                <DialogActions>\n                    <Button color={'secondary'} onClick={setClose}>\n                        Cancel\n                    </Button>\n                    <Button color={'primary'} onClick={submitSong} variant={'outlined'}>\n                        Add Song\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <TextField\n                onChange={(e) => {\n                    setPlayable(false)\n                    setUrl(e.target.value)\n                }}\n                value={url}\n                className={s.urlInput}\n                placeholder={'Add your Youtube or SoundCloud url'}\n                fullWidth\n                margin={'normal'}\n                type='url'\n                InputProps={{\n                    startAdornment: (\n                        <InputAdornment position=\"start\">\n                            <LinkIcon/>\n                        </InputAdornment>\n\n                    )\n                }}/>\n            <Button onClick={() => setModal(true)}\n                    disabled={!playable}\n                    className={s.addSongButton}\n                    variant={\"contained\"}\n                    color={'primary'}\n                    endIcon={<AddBoxOutlined/>}>\n                Add\n            </Button>\n            <ReactPlayer url={url} hidden onReady={(e) => handleEditSong(e)}/>\n        </div>\n    );\n}\n\nexport default LinkInput;\n","import React, {useEffect, useState} from 'react';\r\nimport {Card} from \"@material-ui/core\";\r\nimport CardMedia from \"@material-ui/core/CardMedia\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport SaveAltTwoToneIcon from '@material-ui/icons/SaveAltTwoTone';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {SongContext} from \"../../App\";\r\nimport StopIcon from \"@material-ui/icons/Stop\";\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {ADD_OR_REMOVE_FROM_QUEUE} from \"../../graphql/mutations\";\r\n\r\n\r\nconst useStyle = makeStyles(theme => ({\r\n    container: {\r\n        margin: theme.spacing(3)\r\n    },\r\n    songInfoContainer: {\r\n        display: 'flex',\r\n        alignItems: 'center'\r\n    },\r\n    songInfo: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    },\r\n    thumbnail: {\r\n        objectFit: 'cover',\r\n        width: 140,\r\n        height: 140\r\n    }\r\n}))\r\n\r\nfunction Song({song}) {\r\n    const [songPlaying, setSongPlaying] = useState(false);\r\n    const {thumbnail, title, artist, id} = song;\r\n    const {state, dispatch} = React.useContext(SongContext);\r\n    const s = useStyle();\r\n    const [addOrRemoveFromQueue] = useMutation(ADD_OR_REMOVE_FROM_QUEUE, {\r\n        onCompleted: data => {\r\n            localStorage.setItem(\"queue\", JSON.stringify(data.addOrRemoveFromQueue))\r\n        }\r\n    })\r\n\r\n    useEffect(() => {\r\n        const playing = state.isPlaying && id === state.song.id;\r\n        setSongPlaying(playing)\r\n    }, [id, state.song.id, state.isPlaying])\r\n\r\n    let changeToggle = () => {\r\n        dispatch({type: \"SET_SONG\", song})\r\n        dispatch(songPlaying ? {type: \"STOP_SONG\"} : {type: \"PLAY_SONG\"})\r\n    }\r\n\r\n    let handleAddOrRemoveFromQueue = () => {\r\n        // обработка добавления нужна или нет?\r\n        addOrRemoveFromQueue({\r\n                variables: {input: {...song, __typename: 'Song'}}\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className={s.container}>\r\n            <div className={s.songInfoContainer}>\r\n                <CardMedia image={thumbnail} className={s.thumbnail}/>\r\n                <div className={s.songInfo}>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant={'h5'} component={'h2'}>\r\n                            {title}\r\n                        </Typography>\r\n                        <Typography gutterBottom variant={'body1'} component={'p'} color={'textSecondary'}>\r\n                            {artist}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        {songPlaying\r\n                            ? <IconButton onClick={changeToggle} size={'small'} color={'primary'}>\r\n                                <StopIcon/>\r\n                            </IconButton>\r\n                            : <IconButton onClick={changeToggle} size={'small'} color={'primary'}>\r\n                                <PlayArrowIcon/>\r\n                            </IconButton>}\r\n                        <IconButton size={'small'} color={'secondary'} onClick={handleAddOrRemoveFromQueue}>\r\n                            <SaveAltTwoToneIcon/>\r\n                        </IconButton>\r\n                    </CardActions>\r\n                </div>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default Song;\r\n","import {gql} from 'apollo-boost';\r\n\r\nexport const GET_SONGS =  gql`\r\nsubscription GetSongs {\r\n  songs(order_by: {created_at: desc}) {\r\n    artist\r\n    duration\r\n    id\r\n    thumbnail\r\n    title\r\n    url\r\n  }\r\n}\r\n`","import React from 'react';\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport Song from \"./Song\";\nimport {useSubscription} from \"@apollo/react-hooks\";\nimport {GET_SONGS} from \"../../graphql/subscriptions\";\n\n\n\nfunction ListOfSongs() {\n  const {data, loading, error} = useSubscription(GET_SONGS);\n\n  if(loading){\n    return (\n        <div style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            marginTop: 50\n        }}>\n            <CircularProgress color={'primary'}/>\n        </div>\n    )\n  }\n  if(error){\n      return <div>Error fetching songs</div>\n  }\n  return (\n    <div >\n        {data.songs.map((song)=>(\n            <Song key={song.id} song={song}/>\n        ))}\n    </div>\n  );\n}\n\nexport default ListOfSongs;\n","import React from 'react';\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport {useMutation} from \"@apollo/react-hooks\";\r\nimport {ADD_OR_REMOVE_FROM_QUEUE} from \"../../graphql/mutations\";\r\n    \r\n\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        width: 44,\r\n        height: 44\r\n    },\r\n    text: {\r\n        textOverflow: 'ellipsis',\r\n        overflow: \"hidden\"\r\n    },\r\n    container: {\r\n        display: \"grid\",\r\n        gridAutoFlow: \"column\",\r\n        gridTemplateColumns: \"50px auto 50px\",\r\n        gridGap: 12,\r\n        alignItems: \"center\",\r\n        marginTop: 10\r\n    },\r\n    songInfoContainer: {\r\n        overflow: 'hidden',\r\n        whiteSpace: 'nowrap'\r\n    }\r\n})\r\n\r\nfunction QueuedSong({song}) {\r\n    const s = useStyles();\r\n    const {thumbnail, artist, title} = song;\r\n    const [addOrRemoveFromQueue] = useMutation(ADD_OR_REMOVE_FROM_QUEUE, {\r\n        onCompleted: data => {\r\n            localStorage.setItem(\"queue\", JSON.stringify(data.addOrRemoveFromQueue))\r\n        }\r\n    })\r\n\r\n    let handleAddOrRemoveFromQueue = () => {\r\n        // обработка добавления нужна или нет?\r\n        addOrRemoveFromQueue({\r\n                variables: {input: {...song, __typename: 'Song'}}\r\n            }\r\n        )\r\n    }\r\n\r\n    return (\r\n         (<div className={s.container}>\r\n            <Avatar src={thumbnail} alt={'Song thumbnail'} className={s.avatar}/>\r\n            <div className={s.songInfoContainer}>\r\n                <Typography variant={'subtitle2'} className={s.text}>\r\n                    {title}\r\n                </Typography>\r\n                <Typography variant={'body2'} color={'textSecondary'}  className={s.text}>\r\n                    {artist}\r\n                </Typography>\r\n            </div>\r\n            <IconButton>\r\n                <Delete color={'error'} onClick={handleAddOrRemoveFromQueue}/>\r\n            </IconButton>\r\n        </div>\r\n        )\r\n    );\r\n}\r\n\r\nexport default QueuedSong;\r\n","import React from 'react';\nimport Typography from \"@material-ui/core/Typography\";\nimport QueuedSong from \"./QueuedSong\";\nimport {Hidden} from \"@material-ui/core\";\n\n\n\nfunction QueList({queue}) {\n\n  return (\n      <Hidden mdDown>\n          <div style={{margin: '10px 0'}}>\n              <Typography color={'textSecondary'} variant={'button'}>\n                  QUEUE({queue.length})\n              </Typography>\n              {queue.map((song,i)=>(\n                  <QueuedSong key={i} song={song}/>\n              ))}\n          </div>\n      </Hidden>\n  );\n}\n\nexport default QueList;\n","import {gql} from 'apollo-boost';\r\n\r\nexport const GET_QUEUE_SONGS =  gql`\r\n    query getQueueSongs {\r\n        queue @client{\r\n            id\r\n            duration\r\n            title\r\n            artist\r\n            thumbnail\r\n            url\r\n        }\r\n    }\r\n    `\r\n\r\n","import React, {useEffect, useRef, useState} from 'react';\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport SkipPreviousTwoToneIcon from '@material-ui/icons/SkipPreviousTwoTone';\nimport StopIcon from '@material-ui/icons/Stop';\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport Slider from \"@material-ui/core/Slider\";\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport {makeStyles} from \"@material-ui/core/styles\";\nimport {SongContext} from \"../../App\";\nimport QueList from \"../QueList/QueList\";\nimport {GET_QUEUE_SONGS} from \"../../graphql/queries\";\nimport {useQuery} from \"@apollo/react-hooks\";\nimport ReactPlayer from \"react-player\";\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: 'flex',\n        justifyContent: 'space-between'\n    },\n    details: {\n        display: 'flex',\n        flexDirection: 'column',\n        padding: '0 15px'\n    },\n    content: {\n        flex: '1 0 auto'\n    },\n    thumbnail: {\n        width: 150\n    },\n    controls: {\n        display: 'flex',\n        alignItems: 'center',\n        paddingLeft: theme.spacing(1),\n        paddingRight: theme.spacing(1)\n    },\n    playIcon: {\n        height: 38,\n        width: 38\n    }\n}))\n\n\nfunction MusicPlayer() {\n    const {state, dispatch} = React.useContext(SongContext)\n    const {data} = useQuery(GET_QUEUE_SONGS)\n    const [played, setPlayed] = useState(0)\n    const [seeking, setSeeking] = useState(false)\n    const [playedSeconds, setPlayedSeconds] = useState(0)\n    const [positionInQueue, setPositionInQueue] = useState(0)\n    const reactPlayerRef = useRef();\n\n    useEffect(() => {\n        const songIndex =  data.queue.findIndex((song)=> song.id === state.song.id)\n        setPositionInQueue(songIndex)\n    }, [state.song.id, data.queue])\n\n    useEffect(() => {\n        const nextSong =  data.queue[positionInQueue + 1]\n        if(played >= 0.99 && nextSong){\n            setPlayed(0)\n            dispatch({type: \"SET_SONG\", song: nextSong})\n        }\n    }, [state.song.id, data.queue, played, dispatch, positionInQueue])\n\n    let s = useStyles();\n    const changeToggle = () => {\n        dispatch(state.isPlaying ? {type: \"STOP_SONG\"} : {type: \"PLAY_SONG\"})\n    }\n\n    let handleProgressChange = (event, newValue) => {\n        setPlayed(newValue)\n    }\n\n    let handleSeekMouseDown = () => {\n        setSeeking(true)\n    }\n    let handleSeekMouseUp = () => {\n        setSeeking(false)\n        reactPlayerRef.current.seekTo(played)\n    }\n    let formatDuration = (seconds) => {\n        return new Date(seconds * 1000).toISOString().substr(11, 8)\n    }\n    let handlePlayNextSong = () => {\n        const nextSong =  data.queue[positionInQueue + 1]\n        if(nextSong){\n            dispatch({type: \"SET_SONG\", song: nextSong})\n        }\n    }\n    let handlePlayPrevSong = () => {\n        const prevSong =  data.queue[positionInQueue - 1]\n        if(prevSong){\n            dispatch({type: \"SET_SONG\", song: prevSong})\n        }\n    }\n\n\n    return (\n        <>\n            <Card variant={'outlined'} className={s.container}>\n                <div className={s.details}>\n                    <CardContent className={s.content}>\n                        <Typography variant={'h5'} component={'h3'}>\n                            {state.song.title}\n                        </Typography>\n                        <Typography variant={'subtitle1'} component={'p'} color={'textSecondary'}>\n                            {state.song.artist}\n                        </Typography>\n                    </CardContent>\n                    <div className={s.controls}>\n                        <IconButton onClick={handlePlayPrevSong}>\n                            <SkipPreviousTwoToneIcon/>\n                        </IconButton>\n\n                        {state.isPlaying\n                            ? <IconButton onClick={changeToggle}>\n                                <StopIcon className={s.playIcon}/>\n                            </IconButton>\n                            : <IconButton onClick={changeToggle}>\n                                <PlayArrowIcon className={s.playIcon}/>\n                            </IconButton>}\n\n\n                        <IconButton onClick={handlePlayNextSong}>\n                            <SkipNextIcon/>\n                        </IconButton>\n\n                        <Typography variant={'subtitle1'} component={'p'} color={'textSecondary'}>\n                            {formatDuration(playedSeconds)}\n                        </Typography>\n                    </div>\n                    <Slider\n                        onMouseDown={handleSeekMouseDown}\n                        onMouseUp={handleSeekMouseUp}\n                        onChange={handleProgressChange}\n                        value={played} type={'range'} min={0} max={1} step={0.01}/>\n                </div>\n                <ReactPlayer\n                    hidden url={state.song.url} playing={state.isPlaying} ref={reactPlayerRef}\n                    onProgress={({played, playedSeconds}) => {\n                        setPlayed(played)\n                        if(!seeking){\n                            setPlayed(played)\n                            setPlayedSeconds(playedSeconds)\n                        }\n                    }}\n                />\n                <CardMedia className={s.thumbnail} image={state.song.thumbnail}/>\n            </Card>\n            <QueList queue={data.queue}/>\n        </>\n    );\n}\n\nexport default MusicPlayer;\n","function songReducer(state, action) {\r\n    debugger;\r\n    switch (action.type) {\r\n        case \"PLAY_SONG\":\r\n            return {\r\n                ...state,\r\n                isPlaying: true\r\n            }\r\n        case \"STOP_SONG\":\r\n            return {\r\n                ...state,\r\n                isPlaying: false\r\n            }\r\n        case \"SET_SONG\":\r\n            return {\r\n                ...state,\r\n                song: action.song\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default songReducer;","import React from 'react';\nimport Header from \"./Components/Header/Header\";\nimport LinkInput from \"./Components/LinkIpnut/LinkInput\";\nimport ListOfSongs from \"./Components/ListOfSongs/ListOfSongs\";\nimport MusicPlayer from \"./Components/MusicPlayer/MusicPlayer\";\nimport Grid from \"@material-ui/core/Grid\";\nimport {useMediaQuery} from \"@material-ui/core\";\nimport Hidden from \"@material-ui/core/Hidden\";\nimport songReducer from \"./reducer\";\nimport './index.css';\n\n\nexport const SongContext = React.createContext({\n    song: {\n        id: 'fd404e5d-ff64-4185-ad41-65a8e789efbc',\n        title: 'Klingande & Bright Sparks - Messiah',\n        artist: 'Klingande',\n        url: 'https://soundcloud.com/klingande/klingande-messiah',\n        duration: 184.283,\n        thumbnail: 'https://i1.sndcdn.com/artworks-000493591659-o4jzay-t500x500.jpg'\n    },\n    isPlaying: false\n})\n\nfunction App() {\n    const initialSongState = React.useContext(SongContext);\n    const [state, dispatch] = React.useReducer(songReducer, initialSongState);\n    const greaterThanMd = useMediaQuery(theme => theme.breakpoints.up('md'));\n    const greaterThanSm = useMediaQuery(theme => theme.breakpoints.up('sm'));\n\n    return (\n        <SongContext.Provider value={{state, dispatch}}>\n            <Hidden only={'xs'}>\n                <Header/>\n            </Hidden>\n            <Grid container spacing={3}>\n                <Grid item xs={12} md={7} style={{\n                    paddingTop: greaterThanSm ? 80 : 10\n                }}>\n                    <LinkInput/>\n                    <ListOfSongs/>\n                </Grid>\n                <Grid item xs={12} md={5} style={\n                    greaterThanMd ? {\n                        position: 'fixed',\n                        width: '100%',\n                        right: 0,\n                        top: 70\n                    } : {\n                        position: 'fixed',\n                        width: '100%',\n                        left: 0,\n                        bottom: 0\n                    }}>\n                    <MusicPlayer/>\n                </Grid>\n            </Grid>\n        </SongContext.Provider>\n    );\n}\n\nexport default App;\n","import  {createMuiTheme} from \"@material-ui/core\";\r\nimport {purple, teal} from \"@material-ui/core/colors\";\r\n\r\nconst Theme = createMuiTheme({\r\n    palette: {\r\n        type: \"dark\",\r\n        primary: teal,\r\n        secondary: purple\r\n    }\r\n})\r\n\r\nexport default Theme;","import ApolloClient from 'apollo-client';\r\nimport {WebSocketLink} from 'apollo-link-ws';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\nimport {gql} from 'apollo-boost';\r\nimport {GET_QUEUE_SONGS} from \"./queries\";\r\n\r\nconst client = new ApolloClient({\r\n    link: new WebSocketLink({\r\n        uri: 'wss://react-music-appp.herokuapp.com/v1/graphql',\r\n        options: {\r\n            reconnect: true\r\n        }\r\n    }),\r\n    cache: new InMemoryCache(),\r\n    typeDefs: gql`\r\n        type Song {\r\n        id: uuid!\r\n        title: String!\r\n        artist: String!\r\n        thumbnail: String!\r\n        duration: String!\r\n        url: String!\r\n        }\r\n        input SongInput {\r\n            id: uuid!\r\n            title: String!\r\n            artist: String!\r\n            thumbnail: String!\r\n            duration: String!\r\n            url: String!\r\n        }\r\n        type Query{\r\n            queue: [Song]!\r\n        }\r\n        type Mutation {\r\n            addOrRemoveFromQue(input: SongInput): [Song]!\r\n        }\r\n    `,\r\n    resolvers: {\r\n        Mutation: {\r\n            addOrRemoveFromQueue: (_, {input}, {cache})=> {\r\n                const queryResult = cache.readQuery({\r\n                    query: GET_QUEUE_SONGS\r\n                })\r\n                if(queryResult){\r\n                    const {queue} = queryResult\r\n                    const isInQueue = queue.some(song => song.id === input.id)\r\n                    const newQueue = isInQueue ?\r\n                        queue.filter(song => song.id !== input.id)\r\n                        : [...queue, input]\r\n                    cache.writeQuery({\r\n                        query: GET_QUEUE_SONGS,\r\n                        data: {queue: newQueue}\r\n                    })\r\n                    return newQueue\r\n                }\r\n                return [];\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nconst hasQueue = Boolean(localStorage.getItem(\"queue\"));\r\n\r\nconst data = {\r\n    queue: hasQueue ? JSON.parse(localStorage.getItem(\"queue\")) : []\r\n}\r\n\r\nclient.writeData({ data })\r\n\r\n\r\nexport default client;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {MuiThemeProvider} from '@material-ui/core';\nimport Theme from './Components/Theme/Theme';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport client from './graphql/client';\nimport {ApolloProvider} from '@apollo/react-hooks';\n\n\nReactDOM.render(\n    <ApolloProvider client={client}>\n        <MuiThemeProvider theme={Theme}>\n            <CssBaseline/>\n            <App/>\n        </MuiThemeProvider>\n    </ApolloProvider>,\n        document.getElementById('root')\n    );\n\n\n"],"sourceRoot":""}